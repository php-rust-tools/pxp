// This file is generated by meta/scripts/generate-ast.php.
// Do not make modifications to this file directly.

use crate::utils::CommaSeparated;
use pxp_span::{Span, Spanned};
use pxp_symbol::Symbol;
use pxp_syntax::backed_enum_type::BackedEnumType;
use pxp_syntax::comments::{Comment, CommentGroup};
use pxp_syntax::name::NameQualification;
use pxp_token::Token;
use pxp_type::Type;

pub type Block = Vec<Statement>;

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Statement {
    pub kind: StatementKind,
    pub span: Span,
    pub comments: CommentGroup,
}

impl Spanned for Statement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum StatementKind {
    FullOpeningTag(FullOpeningTagStatement),
    ShortOpeningTag(ShortOpeningTagStatement),
    EchoOpeningTag(EchoOpeningTagStatement),
    ClosingTag(ClosingTagStatement),
    InlineHtml(InlineHtmlStatement),
    Label(LabelStatement),
    Goto(GotoStatement),
    HaltCompiler(HaltCompilerStatement),
    Static(StaticStatement),
    DoWhile(DoWhileStatement),
    While(WhileStatement),
    For(ForStatement),
    Foreach(ForeachStatement),
    Break(BreakStatement),
    Continue(ContinueStatement),
    Constant(ConstantStatement),
    Function(FunctionStatement),
    Class(ClassStatement),
    Trait(TraitStatement),
    Interface(InterfaceStatement),
    If(IfStatement),
    Switch(SwitchStatement),
    Echo(EchoStatement),
    Expression(ExpressionStatement),
    Return(ReturnStatement),
    Namespace(NamespaceStatement),
    Use(UseStatement),
    GroupUse(GroupUseStatement),
    Comment(Comment),
    Try(TryStatement),
    UnitEnum(UnitEnumStatement),
    BackedEnum(BackedEnumStatement),
    Block(BlockStatement),
    Global(GlobalStatement),
    Declare(DeclareStatement),
    Noop(Span),
}

impl Spanned for StatementKind {
    fn span(&self) -> Span {
        match self {
            StatementKind::Noop(span) => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Expression {
    pub kind: ExpressionKind,
    pub span: Span,
    pub comments: CommentGroup,
}

impl Spanned for Expression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum ExpressionKind {
    Missing(Span),
    Eval(EvalExpression),
    Empty(EmptyExpression),
    Die(DieExpression),
    Exit(ExitExpression),
    Isset(IssetExpression),
    Unset(UnsetExpression),
    Print(PrintExpression),
    Literal(Literal),
    ArithmeticOperation(ArithmeticOperationExpression),
    AssignmentOperation(AssignmentOperationExpression),
    BitwiseOperation(BitwiseOperationExpression),
    ComparisonOperation(ComparisonOperationExpression),
    LogicalOperation(LogicalOperationExpression),
    Concat(ConcatExpression),
    Instanceof(InstanceofExpression),
    Reference(ReferenceExpression),
    Parenthesized(ParenthesizedExpression),
    ErrorSuppress(ErrorSuppressExpression),
    Identifier(Identifier),
    Variable(Variable),
    Include(IncludeExpression),
    IncludeOnce(IncludeOnceExpression),
    Require(RequireExpression),
    RequireOnce(RequireOnceExpression),
    FunctionCall(FunctionCallExpression),
    FunctionClosureCreation(FunctionClosureCreationExpression),
    MethodCall(MethodCallExpression),
    MethodClosureCreation(MethodClosureCreationExpression),
    NullsafeMethodCall(NullsafeMethodCallExpression),
    StaticMethodCall(StaticMethodCallExpression),
    StaticVariableMethodCall(StaticVariableMethodCallExpression),
    StaticMethodClosureCreation(StaticMethodClosureCreationExpression),
    StaticVariableMethodClosureCreation(StaticVariableMethodClosureCreationExpression),
    PropertyFetch(PropertyFetchExpression),
    NullsafePropertyFetch(NullsafePropertyFetchExpression),
    StaticPropertyFetch(StaticPropertyFetchExpression),
    ConstantFetch(ConstantFetchExpression),
    Static(Span),
    Self_(Span),
    Parent(Span),
    ShortArray(ShortArrayExpression),
    Array(ArrayExpression),
    List(ListExpression),
    Closure(ClosureExpression),
    ArrowFunction(ArrowFunctionExpression),
    New(NewExpression),
    InterpolatedString(InterpolatedStringExpression),
    Heredoc(HeredocExpression),
    Nowdoc(NowdocExpression),
    ShellExec(ShellExecExpression),
    AnonymousClass(AnonymousClassExpression),
    Bool(BoolExpression),
    ArrayIndex(ArrayIndexExpression),
    Null(Span),
    MagicConstant(MagicConstantExpression),
    ShortTernary(ShortTernaryExpression),
    Ternary(TernaryExpression),
    Coalesce(CoalesceExpression),
    Clone(CloneExpression),
    Match(MatchExpression),
    Throw(ThrowExpression),
    Yield(YieldExpression),
    YieldFrom(YieldFromExpression),
    Cast(CastExpression),
    Name(Name),
    Noop(Span),
}

impl Spanned for ExpressionKind {
    fn span(&self) -> Span {
        match self {
            ExpressionKind::Missing(span) => *span,
            ExpressionKind::Static(span) => *span,
            ExpressionKind::Self_(span) => *span,
            ExpressionKind::Parent(span) => *span,
            ExpressionKind::Null(span) => *span,
            ExpressionKind::Noop(span) => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct InlineHtmlStatement {
    pub span: Span,
    pub html: Token,
}

impl Spanned for InlineHtmlStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct FullOpeningTagStatement {
    pub span: Span,
}

impl Spanned for FullOpeningTagStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ShortOpeningTagStatement {
    pub span: Span,
}

impl Spanned for ShortOpeningTagStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct EchoOpeningTagStatement {
    pub span: Span,
}

impl Spanned for EchoOpeningTagStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ClosingTagStatement {
    pub span: Span,
}

impl Spanned for ClosingTagStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ExpressionStatement {
    pub span: Span,
    pub expression: Expression,
    pub ending: Ending,
}

impl Spanned for ExpressionStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct GlobalStatement {
    pub span: Span,
    pub global: Span,
    pub variables: Vec<Variable>,
    pub semicolon: Span,
}

impl Spanned for GlobalStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct BlockStatement {
    pub span: Span,
    pub left_brace: Span,
    pub statements: Vec<Statement>,
    pub right_brace: Span,
}

impl Spanned for BlockStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum CastKind {
    Int(Span),
    Bool(Span),
    Float(Span),
    String(Span),
    Array(Span),
    Object(Span),
    Unset(Span),
}

impl Spanned for CastKind {
    fn span(&self) -> Span {
        match self {
            CastKind::Int(span) => *span,
            CastKind::Bool(span) => *span,
            CastKind::Float(span) => *span,
            CastKind::String(span) => *span,
            CastKind::Array(span) => *span,
            CastKind::Object(span) => *span,
            CastKind::Unset(span) => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Case {
    pub span: Span,
    pub condition: Option<Expression>,
    pub body: Block,
}

impl Spanned for Case {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Use {
    pub name: Name,
    pub alias: Option<SimpleIdentifier>,
    pub kind: Option<UseKind>,
}

#[derive(Debug, PartialEq, Eq, Clone, Hash, Copy)]
pub enum UseKind {
    Normal,
    Function,
    Const,
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct EvalExpression {
    pub span: Span,
    pub eval: Span,
    pub argument: Box<SingleArgument>,
}

impl Spanned for EvalExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct EmptyExpression {
    pub span: Span,
    pub empty: Span,
    pub argument: Box<SingleArgument>,
}

impl Spanned for EmptyExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct DieExpression {
    pub span: Span,
    pub die: Span,
    pub argument: Option<Box<SingleArgument>>,
}

impl Spanned for DieExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ExitExpression {
    pub span: Span,
    pub exit: Span,
    pub argument: Option<Box<SingleArgument>>,
}

impl Spanned for ExitExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct IssetExpression {
    pub span: Span,
    pub isset: Span,
    pub arguments: ArgumentList,
}

impl Spanned for IssetExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct UnsetExpression {
    pub span: Span,
    pub unset: Span,
    pub arguments: ArgumentList,
}

impl Spanned for UnsetExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct PrintExpression {
    pub span: Span,
    pub print: Span,
    pub value: Option<Box<Expression>>,
    pub argument: Option<Box<SingleArgument>>,
}

impl Spanned for PrintExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ConcatExpression {
    pub span: Span,
    pub left: Box<Expression>,
    pub dot: Span,
    pub right: Box<Expression>,
}

impl Spanned for ConcatExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct InstanceofExpression {
    pub span: Span,
    pub left: Box<Expression>,
    pub instanceof: Span,
    pub right: Box<Expression>,
}

impl Spanned for InstanceofExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ReferenceExpression {
    pub span: Span,
    pub ampersand: Span,
    pub right: Box<Expression>,
}

impl Spanned for ReferenceExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ParenthesizedExpression {
    pub span: Span,
    pub start: Span,
    pub expr: Box<Expression>,
    pub end: Span,
}

impl Spanned for ParenthesizedExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ErrorSuppressExpression {
    pub span: Span,
    pub at: Span,
    pub expr: Box<Expression>,
}

impl Spanned for ErrorSuppressExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct IncludeExpression {
    pub span: Span,
    pub include: Span,
    pub path: Box<Expression>,
}

impl Spanned for IncludeExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct IncludeOnceExpression {
    pub span: Span,
    pub include_once: Span,
    pub path: Box<Expression>,
}

impl Spanned for IncludeOnceExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct RequireExpression {
    pub span: Span,
    pub require: Span,
    pub path: Box<Expression>,
}

impl Spanned for RequireExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct RequireOnceExpression {
    pub span: Span,
    pub require_once: Span,
    pub path: Box<Expression>,
}

impl Spanned for RequireOnceExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct FunctionCallExpression {
    pub span: Span,
    pub target: Box<Expression>,
    pub arguments: ArgumentList,
}

impl Spanned for FunctionCallExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct FunctionClosureCreationExpression {
    pub span: Span,
    pub target: Box<Expression>,
    pub placeholder: ArgumentPlaceholder,
}

impl Spanned for FunctionClosureCreationExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct MethodCallExpression {
    pub span: Span,
    pub target: Box<Expression>,
    pub arrow: Span,
    pub method: Box<Expression>,
    pub arguments: ArgumentList,
}

impl Spanned for MethodCallExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct MethodClosureCreationExpression {
    pub span: Span,
    pub target: Box<Expression>,
    pub arrow: Span,
    pub method: Box<Expression>,
    pub placeholder: ArgumentPlaceholder,
}

impl Spanned for MethodClosureCreationExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct NullsafeMethodCallExpression {
    pub span: Span,
    pub target: Box<Expression>,
    pub question_arrow: Span,
    pub method: Box<Expression>,
    pub arguments: ArgumentList,
}

impl Spanned for NullsafeMethodCallExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct StaticMethodCallExpression {
    pub span: Span,
    pub target: Box<Expression>,
    pub double_colon: Span,
    pub method: Identifier,
    pub arguments: ArgumentList,
}

impl Spanned for StaticMethodCallExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct StaticVariableMethodCallExpression {
    pub span: Span,
    pub target: Box<Expression>,
    pub double_colon: Span,
    pub method: Variable,
    pub arguments: ArgumentList,
}

impl Spanned for StaticVariableMethodCallExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct StaticMethodClosureCreationExpression {
    pub span: Span,
    pub target: Box<Expression>,
    pub double_colon: Span,
    pub method: Identifier,
    pub placeholder: ArgumentPlaceholder,
}

impl Spanned for StaticMethodClosureCreationExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct StaticVariableMethodClosureCreationExpression {
    pub span: Span,
    pub target: Box<Expression>,
    pub double_colon: Span,
    pub method: Variable,
    pub placeholder: ArgumentPlaceholder,
}

impl Spanned for StaticVariableMethodClosureCreationExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct PropertyFetchExpression {
    pub span: Span,
    pub target: Box<Expression>,
    pub arrow: Span,
    pub property: Box<Expression>,
}

impl Spanned for PropertyFetchExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct NullsafePropertyFetchExpression {
    pub span: Span,
    pub target: Box<Expression>,
    pub question_arrow: Span,
    pub property: Box<Expression>,
}

impl Spanned for NullsafePropertyFetchExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct StaticPropertyFetchExpression {
    pub span: Span,
    pub target: Box<Expression>,
    pub double_colon: Span,
    pub property: Variable,
}

impl Spanned for StaticPropertyFetchExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ConstantFetchExpression {
    pub span: Span,
    pub target: Box<Expression>,
    pub double_colon: Span,
    pub constant: Identifier,
}

impl Spanned for ConstantFetchExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ShortArrayExpression {
    pub span: Span,
    pub start: Span,
    pub items: CommaSeparated<ArrayItem>,
    pub end: Span,
}

impl Spanned for ShortArrayExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ArrayExpression {
    pub span: Span,
    pub array: Span,
    pub start: Span,
    pub items: CommaSeparated<ArrayItem>,
    pub end: Span,
}

impl Spanned for ArrayExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ListExpression {
    pub span: Span,
    pub list: Span,
    pub start: Span,
    pub items: Vec<ListEntry>,
    pub end: Span,
}

impl Spanned for ListExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct NewExpression {
    pub span: Span,
    pub new: Span,
    pub target: Box<Expression>,
    pub arguments: Option<ArgumentList>,
}

impl Spanned for NewExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct InterpolatedStringExpression {
    pub span: Span,
    pub parts: Vec<StringPart>,
}

impl Spanned for InterpolatedStringExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct HeredocExpression {
    pub span: Span,
    pub label: Symbol,
    pub parts: Vec<StringPart>,
}

impl Spanned for HeredocExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct NowdocExpression {
    pub span: Span,
    pub label: Token,
    pub value: Token,
}

impl Spanned for NowdocExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ShellExecExpression {
    pub span: Span,
    pub parts: Vec<StringPart>,
}

impl Spanned for ShellExecExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct BoolExpression {
    pub span: Span,
    pub value: Token,
}

impl Spanned for BoolExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ArrayIndexExpression {
    pub span: Span,
    pub array: Box<Expression>,
    pub left_bracket: Span,
    pub index: Option<Box<Expression>>,
    pub right_bracket: Span,
}

impl Spanned for ArrayIndexExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ShortTernaryExpression {
    pub span: Span,
    pub condition: Box<Expression>,
    pub question_colon: Span,
    pub r#else: Box<Expression>,
}

impl Spanned for ShortTernaryExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct TernaryExpression {
    pub span: Span,
    pub condition: Box<Expression>,
    pub question: Span,
    pub then: Box<Expression>,
    pub colon: Span,
    pub r#else: Box<Expression>,
}

impl Spanned for TernaryExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct CoalesceExpression {
    pub span: Span,
    pub lhs: Box<Expression>,
    pub double_question: Span,
    pub rhs: Box<Expression>,
}

impl Spanned for CoalesceExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct CloneExpression {
    pub span: Span,
    pub clone: Span,
    pub target: Box<Expression>,
}

impl Spanned for CloneExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct MatchExpression {
    pub span: Span,
    pub keyword: Span,
    pub left_parenthesis: Span,
    pub condition: Box<Expression>,
    pub right_parenthesis: Span,
    pub left_brace: Span,
    pub default: Option<Box<DefaultMatchArm>>,
    pub arms: Vec<MatchArm>,
    pub right_brace: Span,
}

impl Spanned for MatchExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ThrowExpression {
    pub span: Span,
    pub value: Box<Expression>,
}

impl Spanned for ThrowExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct YieldExpression {
    pub span: Span,
    pub r#yield: Span,
    pub key: Option<Box<Expression>>,
    pub value: Option<Box<Expression>>,
}

impl Spanned for YieldExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct YieldFromExpression {
    pub span: Span,
    pub r#yield: Span,
    pub from: Span,
    pub value: Box<Expression>,
}

impl Spanned for YieldFromExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct CastExpression {
    pub span: Span,
    pub kind: CastKind,
    pub value: Box<Expression>,
}

impl Spanned for CastExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct DefaultMatchArm {
    pub span: Span,
    pub keyword: Span,
    pub double_arrow: Span,
    pub body: Expression,
}

impl Spanned for DefaultMatchArm {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct MatchArm {
    pub span: Span,
    pub conditions: Vec<Expression>,
    pub arrow: Span,
    pub body: Expression,
}

impl Spanned for MatchArm {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum MagicConstantExpression {
    Directory(Span),
    File(Span),
    Line(Span),
    Function(Span),
    Class(Span),
    Method(Span),
    Namespace(Span),
    Trait(Span),
    CompilerHaltOffset(Span),
}

impl Spanned for MagicConstantExpression {
    fn span(&self) -> Span {
        match self {
            MagicConstantExpression::Directory(span) => *span,
            MagicConstantExpression::File(span) => *span,
            MagicConstantExpression::Line(span) => *span,
            MagicConstantExpression::Function(span) => *span,
            MagicConstantExpression::Class(span) => *span,
            MagicConstantExpression::Method(span) => *span,
            MagicConstantExpression::Namespace(span) => *span,
            MagicConstantExpression::Trait(span) => *span,
            MagicConstantExpression::CompilerHaltOffset(span) => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum StringPart {
    Literal(LiteralStringPart),
    Expression(ExpressionStringPart),
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct LiteralStringPart {
    pub span: Span,
    pub value: Symbol,
}

impl Spanned for LiteralStringPart {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ExpressionStringPart {
    pub span: Span,
    pub expression: Box<Expression>,
}

impl Spanned for ExpressionStringPart {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum ArrayItem {
    Skipped(Span),
    Value {
        span: Span,
        value: Expression,
    },
    ReferencedValue {
        span: Span,
        ampersand: Span,
        value: Expression,
    },
    SpreadValue {
        span: Span,
        ellipsis: Span,
        value: Expression,
    },
    KeyValue {
        span: Span,
        key: Expression,
        double_arrow: Span,
        value: Expression,
    },
    ReferencedKeyValue {
        span: Span,
        key: Expression,
        double_arrow: Span,
        ampersand: Span,
        value: Expression,
    },
}

impl Spanned for ArrayItem {
    fn span(&self) -> Span {
        match self {
            ArrayItem::Skipped(span) => *span,
            ArrayItem::Value { span, .. } => *span,
            ArrayItem::ReferencedValue { span, .. } => *span,
            ArrayItem::SpreadValue { span, .. } => *span,
            ArrayItem::KeyValue { span, .. } => *span,
            ArrayItem::ReferencedKeyValue { span, .. } => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum ListEntry {
    Skipped(Span),
    Value {
        span: Span,
        value: Expression,
    },
    KeyValue {
        span: Span,
        key: Expression,
        double_arrow: Span,
        value: Expression,
    },
}

impl Spanned for ListEntry {
    fn span(&self) -> Span {
        match self {
            ListEntry::Skipped(span) => *span,
            ListEntry::Value { span, .. } => *span,
            ListEntry::KeyValue { span, .. } => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct PositionalArgument {
    pub span: Span,
    pub comments: CommentGroup,
    pub ellipsis: Option<Span>,
    pub value: Expression,
}

impl Spanned for PositionalArgument {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct NamedArgument {
    pub span: Span,
    pub comments: CommentGroup,
    pub name: SimpleIdentifier,
    pub colon: Span,
    pub ellipsis: Option<Span>,
    pub value: Expression,
}

impl Spanned for NamedArgument {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum Argument {
    Positional(PositionalArgument),
    Named(NamedArgument),
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ArgumentList {
    pub span: Span,
    pub comments: CommentGroup,
    pub left_parenthesis: Span,
    pub arguments: Vec<Argument>,
    pub right_parenthesis: Span,
}

impl Spanned for ArgumentList {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct SingleArgument {
    pub span: Span,
    pub comments: CommentGroup,
    pub left_parenthesis: Span,
    pub argument: Option<Argument>,
    pub right_parenthesis: Span,
}

impl Spanned for SingleArgument {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ArgumentPlaceholder {
    pub span: Span,
    pub comments: CommentGroup,
    pub left_parenthesis: Span,
    pub ellipsis: Span,
    pub right_parenthesis: Span,
}

impl Spanned for ArgumentPlaceholder {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Attribute {
    pub span: Span,
    pub name: Name,
    pub arguments: Option<ArgumentList>,
}

impl Spanned for Attribute {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct AttributeGroup {
    pub span: Span,
    pub members: Vec<Attribute>,
}

impl Spanned for AttributeGroup {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ClassBody {
    pub span: Span,
    pub left_brace: Span,
    pub members: Vec<ClassishMember>,
    pub right_brace: Span,
}

impl Spanned for ClassBody {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ClassStatement {
    pub span: Span,
    pub attributes: Vec<AttributeGroup>,
    pub modifiers: ClassModifierGroup,
    pub class: Span,
    pub name: Name,
    pub extends: Option<ClassExtends>,
    pub implements: Option<ClassImplements>,
    pub body: ClassBody,
}

impl Spanned for ClassStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct AnonymousClassBody {
    pub span: Span,
    pub left_brace: Span,
    pub members: Vec<ClassishMember>,
    pub right_brace: Span,
}

impl Spanned for AnonymousClassBody {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct AnonymousClassExpression {
    pub span: Span,
    pub attributes: Vec<AttributeGroup>,
    pub class: Span,
    pub extends: Option<ClassExtends>,
    pub implements: Option<ClassImplements>,
    pub body: AnonymousClassBody,
}

impl Spanned for AnonymousClassExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ClassExtends {
    pub span: Span,
    pub extends: Span,
    pub parent: Name,
}

impl Spanned for ClassExtends {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ClassImplements {
    pub span: Span,
    pub implements: Span,
    pub interfaces: CommaSeparated<Name>,
}

impl Spanned for ClassImplements {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum ClassishMember {
    Constant(ClassishConstant),
    TraitUsage(TraitUsage),
    Property(Property),
    VariableProperty(VariableProperty),
    AbstractMethod(AbstractMethod),
    AbstractConstructor(AbstractConstructor),
    ConcreteMethod(ConcreteMethod),
    ConcreteConstructor(ConcreteConstructor),
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ConstantEntry {
    pub span: Span,
    pub name: Name,
    pub equals: Span,
    pub value: Expression,
}

impl Spanned for ConstantEntry {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ClassishConstantEntry {
    pub span: Span,
    pub name: SimpleIdentifier,
    pub equals: Span,
    pub value: Expression,
}

impl Spanned for ClassishConstantEntry {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ConstantStatement {
    pub span: Span,
    pub comments: CommentGroup,
    pub r#const: Span,
    pub entries: Vec<ConstantEntry>,
    pub semicolon: Span,
}

impl Spanned for ConstantStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ClassishConstant {
    pub span: Span,
    pub comments: CommentGroup,
    pub attributes: Vec<AttributeGroup>,
    pub modifiers: ConstantModifierGroup,
    pub r#const: Span,
    pub data_type: Option<DataType>,
    pub entries: Vec<ClassishConstantEntry>,
    pub semicolon: Span,
}

impl Spanned for ClassishConstant {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct IfStatement {
    pub span: Span,
    pub r#if: Span,
    pub left_parenthesis: Span,
    pub condition: Expression,
    pub right_parenthesis: Span,
    pub body: IfStatementBody,
}

impl Spanned for IfStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum IfStatementBody {
    Statement {
        span: Span,
        statement: Box<Statement>,
        elseifs: Vec<IfStatementElseIf>,
        r#else: Option<IfStatementElse>,
    },
    Block {
        span: Span,
        colon: Span,
        statements: Vec<Statement>,
        elseifs: Vec<IfStatementElseIfBlock>,
        r#else: Option<IfStatementElseBlock>,
        endif: Span,
        ending: Ending,
    },
}

impl Spanned for IfStatementBody {
    fn span(&self) -> Span {
        match self {
            IfStatementBody::Statement { span, .. } => *span,
            IfStatementBody::Block { span, .. } => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct IfStatementElseIf {
    pub span: Span,
    pub elseif: Span,
    pub left_parenthesis: Span,
    pub condition: Expression,
    pub right_parenthesis: Span,
    pub statement: Box<Statement>,
}

impl Spanned for IfStatementElseIf {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct IfStatementElse {
    pub span: Span,
    pub r#else: Span,
    pub statement: Box<Statement>,
}

impl Spanned for IfStatementElse {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct IfStatementElseIfBlock {
    pub span: Span,
    pub elseif: Span,
    pub left_parenthesis: Span,
    pub condition: Expression,
    pub right_parenthesis: Span,
    pub colon: Span,
    pub statements: Vec<Statement>,
}

impl Spanned for IfStatementElseIfBlock {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct IfStatementElseBlock {
    pub span: Span,
    pub r#else: Span,
    pub colon: Span,
    pub statements: Vec<Statement>,
}

impl Spanned for IfStatementElseBlock {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct DataType {
    pub kind: Type<Name>,
    pub span: Span,
}

impl Spanned for DataType {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct DeclareEntry {
    pub span: Span,
    pub key: SimpleIdentifier,
    pub equals: Span,
    pub value: Literal,
}

impl Spanned for DeclareEntry {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct DeclareEntryGroup {
    pub span: Span,
    pub left_parenthesis: Span,
    pub right_parenthesis: Span,
    pub entries: Vec<DeclareEntry>,
}

impl Spanned for DeclareEntryGroup {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum DeclareBody {
    Noop {
        span: Span,
        semicolon: Span,
    },
    Braced {
        span: Span,
        left_brace: Span,
        statements: Vec<Statement>,
        right_brace: Span,
    },
    Expression {
        span: Span,
        expression: Expression,
        semicolon: Span,
    },
    Block {
        span: Span,
        colon: Span,
        statements: Vec<Statement>,
        enddeclare: Span,
        semicolon: Span,
    },
}

impl Spanned for DeclareBody {
    fn span(&self) -> Span {
        match self {
            DeclareBody::Noop { span, .. } => *span,
            DeclareBody::Braced { span, .. } => *span,
            DeclareBody::Expression { span, .. } => *span,
            DeclareBody::Block { span, .. } => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct DeclareStatement {
    pub span: Span,
    pub declare: Span,
    pub entries: DeclareEntryGroup,
    pub body: DeclareBody,
}

impl Spanned for DeclareStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct UnitEnumCase {
    pub span: Span,
    pub attributes: Vec<AttributeGroup>,
    pub start: Span,
    pub name: SimpleIdentifier,
    pub end: Span,
}

impl Spanned for UnitEnumCase {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum UnitEnumMember {
    Case(UnitEnumCase),
    Classish(ClassishMember),
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct UnitEnumBody {
    pub span: Span,
    pub left_brace: Span,
    pub members: Vec<UnitEnumMember>,
    pub right_brace: Span,
}

impl Spanned for UnitEnumBody {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct UnitEnumStatement {
    pub span: Span,
    pub attributes: Vec<AttributeGroup>,
    pub r#enum: Span,
    pub name: Name,
    pub implements: Vec<Name>,
    pub body: UnitEnumBody,
}

impl Spanned for UnitEnumStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct BackedEnumCase {
    pub span: Span,
    pub attributes: Vec<AttributeGroup>,
    pub case: Span,
    pub name: SimpleIdentifier,
    pub equals: Span,
    pub value: Expression,
    pub semicolon: Span,
}

impl Spanned for BackedEnumCase {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum BackedEnumMember {
    Case(BackedEnumCase),
    Classish(ClassishMember),
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct BackedEnumBody {
    pub span: Span,
    pub left_brace: Span,
    pub members: Vec<BackedEnumMember>,
    pub right_brace: Span,
}

impl Spanned for BackedEnumBody {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct BackedEnumStatement {
    pub span: Span,
    pub attributes: Vec<AttributeGroup>,
    pub r#enum: Span,
    pub name: Name,
    pub backed_type: BackedEnumType,
    pub implements: Vec<Name>,
    pub body: BackedEnumBody,
}

impl Spanned for BackedEnumStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ReturnType {
    pub span: Span,
    pub colon: Span,
    pub data_type: DataType,
}

impl Spanned for ReturnType {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct FunctionParameter {
    pub span: Span,
    pub comments: CommentGroup,
    pub name: SimpleVariable,
    pub attributes: Vec<AttributeGroup>,
    pub data_type: Option<DataType>,
    pub ellipsis: Option<Span>,
    pub default: Option<Expression>,
    pub ampersand: Option<Span>,
}

impl Spanned for FunctionParameter {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct FunctionParameterList {
    pub span: Span,
    pub comments: CommentGroup,
    pub left_parenthesis: Span,
    pub parameters: CommaSeparated<FunctionParameter>,
    pub right_parenthesis: Span,
}

impl Spanned for FunctionParameterList {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct FunctionBody {
    pub span: Span,
    pub comments: CommentGroup,
    pub left_brace: Span,
    pub statements: Vec<Statement>,
    pub right_brace: Span,
}

impl Spanned for FunctionBody {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct FunctionStatement {
    pub span: Span,
    pub comments: CommentGroup,
    pub attributes: Vec<AttributeGroup>,
    pub function: Span,
    pub ampersand: Option<Span>,
    pub name: Name,
    pub parameters: FunctionParameterList,
    pub return_type: Option<ReturnType>,
    pub body: FunctionBody,
}

impl Spanned for FunctionStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ClosureUseVariable {
    pub span: Span,
    pub comments: CommentGroup,
    pub ampersand: Option<Span>,
    pub variable: SimpleVariable,
}

impl Spanned for ClosureUseVariable {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ClosureUse {
    pub span: Span,
    pub comments: CommentGroup,
    pub r#use: Span,
    pub left_parenthesis: Span,
    pub variables: CommaSeparated<ClosureUseVariable>,
    pub right_parenthesis: Span,
}

impl Spanned for ClosureUse {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ClosureExpression {
    pub span: Span,
    pub comments: CommentGroup,
    pub attributes: Vec<AttributeGroup>,
    pub r#static: Option<Span>,
    pub function: Span,
    pub ampersand: Option<Span>,
    pub parameters: FunctionParameterList,
    pub uses: Option<ClosureUse>,
    pub return_type: Option<ReturnType>,
    pub body: FunctionBody,
}

impl Spanned for ClosureExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ArrowFunctionExpression {
    pub span: Span,
    pub comments: CommentGroup,
    pub r#static: Option<Span>,
    pub ampersand: Option<Span>,
    pub r#fn: Span,
    pub attributes: Vec<AttributeGroup>,
    pub parameters: FunctionParameterList,
    pub return_type: Option<ReturnType>,
    pub double_arrow: Span,
    pub body: Box<Expression>,
}

impl Spanned for ArrowFunctionExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ConstructorParameter {
    pub span: Span,
    pub attributes: Vec<AttributeGroup>,
    pub comments: CommentGroup,
    pub ampersand: Option<Span>,
    pub name: SimpleVariable,
    pub data_type: Option<DataType>,
    pub ellipsis: Option<Span>,
    pub default: Option<Expression>,
    pub modifiers: PromotedPropertyModifierGroup,
}

impl Spanned for ConstructorParameter {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ConstructorParameterList {
    pub span: Span,
    pub comments: CommentGroup,
    pub left_parenthesis: Span,
    pub parameters: CommaSeparated<ConstructorParameter>,
    pub right_parenthesis: Span,
}

impl Spanned for ConstructorParameterList {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct AbstractConstructor {
    pub span: Span,
    pub comments: CommentGroup,
    pub attributes: Vec<AttributeGroup>,
    pub modifiers: MethodModifierGroup,
    pub function: Span,
    pub ampersand: Option<Span>,
    pub name: SimpleIdentifier,
    pub parameters: ConstructorParameterList,
    pub semicolon: Span,
}

impl Spanned for AbstractConstructor {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ConcreteConstructor {
    pub span: Span,
    pub comments: CommentGroup,
    pub attributes: Vec<AttributeGroup>,
    pub modifiers: MethodModifierGroup,
    pub function: Span,
    pub ampersand: Option<Span>,
    pub name: SimpleIdentifier,
    pub parameters: ConstructorParameterList,
    pub body: MethodBody,
}

impl Spanned for ConcreteConstructor {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct AbstractMethod {
    pub span: Span,
    pub comments: CommentGroup,
    pub attributes: Vec<AttributeGroup>,
    pub modifiers: MethodModifierGroup,
    pub function: Span,
    pub ampersand: Option<Span>,
    pub name: SimpleIdentifier,
    pub parameters: FunctionParameterList,
    pub return_type: Option<ReturnType>,
    pub semicolon: Span,
}

impl Spanned for AbstractMethod {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ConcreteMethod {
    pub span: Span,
    pub comments: CommentGroup,
    pub attributes: Vec<AttributeGroup>,
    pub modifiers: MethodModifierGroup,
    pub function: Span,
    pub ampersand: Option<Span>,
    pub name: SimpleIdentifier,
    pub parameters: FunctionParameterList,
    pub return_type: Option<ReturnType>,
    pub body: MethodBody,
}

impl Spanned for ConcreteMethod {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct MethodBody {
    pub span: Span,
    pub comments: CommentGroup,
    pub left_brace: Span,
    pub statements: Vec<Statement>,
    pub right_brace: Span,
}

impl Spanned for MethodBody {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct LabelStatement {
    pub span: Span,
    pub comments: CommentGroup,
    pub label: SimpleIdentifier,
    pub colon: Span,
}

impl Spanned for LabelStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct GotoStatement {
    pub span: Span,
    pub comments: CommentGroup,
    pub keyword: Span,
    pub label: SimpleIdentifier,
    pub semicolon: Span,
}

impl Spanned for GotoStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum Identifier {
    SimpleIdentifier(SimpleIdentifier),
    DynamicIdentifier(DynamicIdentifier),
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct SimpleIdentifier {
    pub symbol: Symbol,
    pub span: Span,
}

impl Spanned for SimpleIdentifier {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct DynamicIdentifier {
    pub span: Span,
    pub expr: Box<Expression>,
}

impl Spanned for DynamicIdentifier {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct InterfaceExtends {
    pub span: Span,
    pub extends: Span,
    pub parents: CommaSeparated<Name>,
}

impl Spanned for InterfaceExtends {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct InterfaceBody {
    pub span: Span,
    pub left_brace: Span,
    pub members: Vec<ClassishMember>,
    pub right_brace: Span,
}

impl Spanned for InterfaceBody {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct InterfaceStatement {
    pub span: Span,
    pub attributes: Vec<AttributeGroup>,
    pub interface: Span,
    pub name: Name,
    pub extends: Option<InterfaceExtends>,
    pub body: InterfaceBody,
}

impl Spanned for InterfaceStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Literal {
    pub span: Span,
    pub kind: LiteralKind,
    pub token: Token,
}

impl Spanned for Literal {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum LiteralKind {
    Integer,
    Float,
    String,
    Missing,
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ForeachStatement {
    pub span: Span,
    pub foreach: Span,
    pub left_parenthesis: Span,
    pub iterator: ForeachStatementIterator,
    pub right_parenthesis: Span,
    pub body: ForeachStatementBody,
}

impl Spanned for ForeachStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum ForeachStatementIterator {
    Value {
        span: Span,
        expression: Expression,
        r#as: Span,
        ampersand: Option<Span>,
        value: Expression,
    },
    KeyAndValue {
        span: Span,
        expression: Expression,
        r#as: Span,
        ampersand: Option<Span>,
        key: Expression,
        double_arrow: Span,
        value: Expression,
    },
}

impl Spanned for ForeachStatementIterator {
    fn span(&self) -> Span {
        match self {
            ForeachStatementIterator::Value { span, .. } => *span,
            ForeachStatementIterator::KeyAndValue { span, .. } => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum ForeachStatementBody {
    Statement {
        span: Span,
        statement: Box<Statement>,
    },
    Block {
        span: Span,
        colon: Span,
        statements: Vec<Statement>,
        endforeach: Span,
        ending: Ending,
    },
}

impl Spanned for ForeachStatementBody {
    fn span(&self) -> Span {
        match self {
            ForeachStatementBody::Statement { span, .. } => *span,
            ForeachStatementBody::Block { span, .. } => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ForStatement {
    pub span: Span,
    pub r#for: Span,
    pub left_parenthesis: Span,
    pub iterator: ForStatementIterator,
    pub right_parenthesis: Span,
    pub body: ForStatementBody,
}

impl Spanned for ForStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ForStatementIterator {
    pub span: Span,
    pub initializations: CommaSeparated<Expression>,
    pub initializations_semicolon: Span,
    pub conditions: CommaSeparated<Expression>,
    pub conditions_semicolon: Span,
    pub r#loop: CommaSeparated<Expression>,
}

impl Spanned for ForStatementIterator {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum ForStatementBody {
    Statement {
        span: Span,
        statement: Box<Statement>,
    },
    Block {
        span: Span,
        colon: Span,
        statements: Vec<Statement>,
        endfor: Span,
        ending: Ending,
    },
}

impl Spanned for ForStatementBody {
    fn span(&self) -> Span {
        match self {
            ForStatementBody::Statement { span, .. } => *span,
            ForStatementBody::Block { span, .. } => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct DoWhileStatement {
    pub span: Span,
    pub r#do: Span,
    pub body: Box<Statement>,
    pub r#while: Span,
    pub left_parenthesis: Span,
    pub condition: Expression,
    pub right_parenthesis: Span,
    pub semicolon: Span,
}

impl Spanned for DoWhileStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct WhileStatement {
    pub span: Span,
    pub r#while: Span,
    pub left_parenthesis: Span,
    pub condition: Expression,
    pub right_parenthesis: Span,
    pub body: WhileStatementBody,
}

impl Spanned for WhileStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum WhileStatementBody {
    Statement {
        span: Span,
        statement: Box<Statement>,
    },
    Block {
        span: Span,
        colon: Span,
        statements: Vec<Statement>,
        endwhile: Span,
        ending: Ending,
    },
}

impl Spanned for WhileStatementBody {
    fn span(&self) -> Span {
        match self {
            WhileStatementBody::Statement { span, .. } => *span,
            WhileStatementBody::Block { span, .. } => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum Level {
    Literal(Literal),
    Parenthesized {
        span: Span,
        left_parenthesis: Span,
        level: Box<Level>,
        right_parenthesis: Span,
    },
}

impl Spanned for Level {
    fn span(&self) -> Span {
        match self {
            Level::Parenthesized { span, .. } => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct BreakStatement {
    pub span: Span,
    pub r#break: Span,
    pub level: Option<Level>,
    pub ending: Ending,
}

impl Spanned for BreakStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ContinueStatement {
    pub span: Span,
    pub r#continue: Span,
    pub level: Option<Level>,
    pub ending: Ending,
}

impl Spanned for ContinueStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum VisibilityModifier {
    Public(Span),
    Protected(Span),
    Private(Span),
}

impl Spanned for VisibilityModifier {
    fn span(&self) -> Span {
        match self {
            VisibilityModifier::Public(span) => *span,
            VisibilityModifier::Protected(span) => *span,
            VisibilityModifier::Private(span) => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum PromotedPropertyModifier {
    Public(Span),
    Protected(Span),
    Private(Span),
    Readonly(Span),
}

impl Spanned for PromotedPropertyModifier {
    fn span(&self) -> Span {
        match self {
            PromotedPropertyModifier::Public(span) => *span,
            PromotedPropertyModifier::Protected(span) => *span,
            PromotedPropertyModifier::Private(span) => *span,
            PromotedPropertyModifier::Readonly(span) => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone, Default)]
pub struct PromotedPropertyModifierGroup {
    pub span: Span,
    pub modifiers: Vec<PromotedPropertyModifier>,
}

impl Spanned for PromotedPropertyModifierGroup {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum PropertyModifier {
    Public(Span),
    Protected(Span),
    Private(Span),
    Static(Span),
    Readonly(Span),
}

impl Spanned for PropertyModifier {
    fn span(&self) -> Span {
        match self {
            PropertyModifier::Public(span) => *span,
            PropertyModifier::Protected(span) => *span,
            PropertyModifier::Private(span) => *span,
            PropertyModifier::Static(span) => *span,
            PropertyModifier::Readonly(span) => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone, Default)]
pub struct PropertyModifierGroup {
    pub span: Span,
    pub modifiers: Vec<PropertyModifier>,
}

impl Spanned for PropertyModifierGroup {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum MethodModifier {
    Public(Span),
    Protected(Span),
    Private(Span),
    Static(Span),
    Abstract(Span),
    Final(Span),
}

impl Spanned for MethodModifier {
    fn span(&self) -> Span {
        match self {
            MethodModifier::Public(span) => *span,
            MethodModifier::Protected(span) => *span,
            MethodModifier::Private(span) => *span,
            MethodModifier::Static(span) => *span,
            MethodModifier::Abstract(span) => *span,
            MethodModifier::Final(span) => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone, Default)]
pub struct MethodModifierGroup {
    pub span: Span,
    pub modifiers: Vec<MethodModifier>,
}

impl Spanned for MethodModifierGroup {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum ClassModifier {
    Abstract(Span),
    Final(Span),
    Readonly(Span),
}

impl Spanned for ClassModifier {
    fn span(&self) -> Span {
        match self {
            ClassModifier::Abstract(span) => *span,
            ClassModifier::Final(span) => *span,
            ClassModifier::Readonly(span) => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone, Default)]
pub struct ClassModifierGroup {
    pub span: Span,
    pub modifiers: Vec<ClassModifier>,
}

impl Spanned for ClassModifierGroup {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum ConstantModifier {
    Public(Span),
    Protected(Span),
    Private(Span),
    Final(Span),
}

impl Spanned for ConstantModifier {
    fn span(&self) -> Span {
        match self {
            ConstantModifier::Public(span) => *span,
            ConstantModifier::Protected(span) => *span,
            ConstantModifier::Private(span) => *span,
            ConstantModifier::Final(span) => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ConstantModifierGroup {
    pub span: Span,
    pub modifiers: Vec<ConstantModifier>,
}

impl Spanned for ConstantModifierGroup {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct UnbracedNamespace {
    pub span: Span,
    pub start: Span,
    pub name: Name,
    pub end: Span,
    pub statements: Vec<Statement>,
}

impl Spanned for UnbracedNamespace {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct BracedNamespace {
    pub span: Span,
    pub namespace: Span,
    pub name: Option<Name>,
    pub body: BracedNamespaceBody,
}

impl Spanned for BracedNamespace {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct BracedNamespaceBody {
    pub span: Span,
    pub start: Span,
    pub end: Span,
    pub statements: Vec<Statement>,
}

impl Spanned for BracedNamespaceBody {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum NamespaceStatement {
    Unbraced(UnbracedNamespace),
    Braced(BracedNamespace),
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ArithmeticOperationExpression {
    pub span: Span,
    pub kind: ArithmeticOperationKind,
}

impl Spanned for ArithmeticOperationExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum ArithmeticOperationKind {
    Addition {
        left: Box<Expression>,
        plus: Span,
        right: Box<Expression>,
    },
    Subtraction {
        left: Box<Expression>,
        minus: Span,
        right: Box<Expression>,
    },
    Multiplication {
        left: Box<Expression>,
        asterisk: Span,
        right: Box<Expression>,
    },
    Division {
        left: Box<Expression>,
        slash: Span,
        right: Box<Expression>,
    },
    Modulo {
        left: Box<Expression>,
        percent: Span,
        right: Box<Expression>,
    },
    Exponentiation {
        left: Box<Expression>,
        pow: Span,
        right: Box<Expression>,
    },
    Negative {
        minus: Span,
        right: Box<Expression>,
    },
    Positive {
        plus: Span,
        right: Box<Expression>,
    },
    PreIncrement {
        increment: Span,
        right: Box<Expression>,
    },
    PostIncrement {
        left: Box<Expression>,
        increment: Span,
    },
    PreDecrement {
        decrement: Span,
        right: Box<Expression>,
    },
    PostDecrement {
        left: Box<Expression>,
        decrement: Span,
    },
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct AssignmentOperationExpression {
    pub span: Span,
    pub kind: AssignmentOperationKind,
}

impl Spanned for AssignmentOperationExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum AssignmentOperationKind {
    Assign {
        left: Box<Expression>,
        equals: Span,
        right: Box<Expression>,
    },
    Addition {
        left: Box<Expression>,
        plus_equals: Span,
        right: Box<Expression>,
    },
    Subtraction {
        left: Box<Expression>,
        minus_equals: Span,
        right: Box<Expression>,
    },
    Multiplication {
        left: Box<Expression>,
        asterisk_equals: Span,
        right: Box<Expression>,
    },
    Division {
        left: Box<Expression>,
        slash_equals: Span,
        right: Box<Expression>,
    },
    Modulo {
        left: Box<Expression>,
        percent_equals: Span,
        right: Box<Expression>,
    },
    Exponentiation {
        left: Box<Expression>,
        pow_equals: Span,
        right: Box<Expression>,
    },
    Concat {
        left: Box<Expression>,
        dot_equals: Span,
        right: Box<Expression>,
    },
    BitwiseAnd {
        left: Box<Expression>,
        ampersand_equals: Span,
        right: Box<Expression>,
    },
    BitwiseOr {
        left: Box<Expression>,
        pipe_equals: Span,
        right: Box<Expression>,
    },
    BitwiseXor {
        left: Box<Expression>,
        caret_equals: Span,
        right: Box<Expression>,
    },
    LeftShift {
        left: Box<Expression>,
        left_shift_equals: Span,
        right: Box<Expression>,
    },
    RightShift {
        left: Box<Expression>,
        right_shift_equals: Span,
        right: Box<Expression>,
    },
    Coalesce {
        left: Box<Expression>,
        coalesce_equals: Span,
        right: Box<Expression>,
    },
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct BitwiseOperationExpression {
    pub span: Span,
    pub kind: BitwiseOperationKind,
}

impl Spanned for BitwiseOperationExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum BitwiseOperationKind {
    And {
        left: Box<Expression>,
        and: Span,
        right: Box<Expression>,
    },
    Or {
        left: Box<Expression>,
        or: Span,
        right: Box<Expression>,
    },
    Xor {
        left: Box<Expression>,
        xor: Span,
        right: Box<Expression>,
    },
    LeftShift {
        left: Box<Expression>,
        left_shift: Span,
        right: Box<Expression>,
    },
    RightShift {
        left: Box<Expression>,
        right_shift: Span,
        right: Box<Expression>,
    },
    Not {
        not: Span,
        right: Box<Expression>,
    },
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ComparisonOperationExpression {
    pub span: Span,
    pub kind: ComparisonOperationKind,
}

impl Spanned for ComparisonOperationExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum ComparisonOperationKind {
    Equal {
        left: Box<Expression>,
        double_equals: Span,
        right: Box<Expression>,
    },
    Identical {
        left: Box<Expression>,
        triple_equals: Span,
        right: Box<Expression>,
    },
    NotEqual {
        left: Box<Expression>,
        bang_equals: Span,
        right: Box<Expression>,
    },
    AngledNotEqual {
        left: Box<Expression>,
        angled_left_right: Span,
        right: Box<Expression>,
    },
    NotIdentical {
        left: Box<Expression>,
        bang_double_equals: Span,
        right: Box<Expression>,
    },
    LessThan {
        left: Box<Expression>,
        less_than: Span,
        right: Box<Expression>,
    },
    GreaterThan {
        left: Box<Expression>,
        greater_than: Span,
        right: Box<Expression>,
    },
    LessThanOrEqual {
        left: Box<Expression>,
        less_than_equals: Span,
        right: Box<Expression>,
    },
    GreaterThanOrEqual {
        left: Box<Expression>,
        greater_than_equals: Span,
        right: Box<Expression>,
    },
    Spaceship {
        left: Box<Expression>,
        spaceship: Span,
        right: Box<Expression>,
    },
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct LogicalOperationExpression {
    pub span: Span,
    pub kind: LogicalOperationKind,
}

impl Spanned for LogicalOperationExpression {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum LogicalOperationKind {
    And {
        left: Box<Expression>,
        double_ampersand: Span,
        right: Box<Expression>,
    },
    Or {
        left: Box<Expression>,
        double_pipe: Span,
        right: Box<Expression>,
    },
    Not {
        bang: Span,
        right: Box<Expression>,
    },
    LogicalAnd {
        left: Box<Expression>,
        and: Span,
        right: Box<Expression>,
    },
    LogicalOr {
        left: Box<Expression>,
        or: Span,
        right: Box<Expression>,
    },
    LogicalXor {
        left: Box<Expression>,
        xor: Span,
        right: Box<Expression>,
    },
}

#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub struct Name {
    pub kind: NameKind,
    pub span: Span,
}

impl Spanned for Name {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub enum NameKind {
    Special(SpecialName),
    Unresolved(UnresolvedName),
    Resolved(ResolvedName),
}

#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub struct SpecialName {
    pub span: Span,
    pub kind: SpecialNameKind,
    pub symbol: Symbol,
}

impl Spanned for SpecialName {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub enum SpecialNameKind {
    Self_(Span),
    Parent(Span),
    Static(Span),
}

impl Spanned for SpecialNameKind {
    fn span(&self) -> Span {
        match self {
            SpecialNameKind::Self_(span) => *span,
            SpecialNameKind::Parent(span) => *span,
            SpecialNameKind::Static(span) => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub struct UnresolvedName {
    pub span: Span,
    pub symbol: Symbol,
    pub qualification: NameQualification,
}

impl Spanned for UnresolvedName {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub struct ResolvedName {
    pub span: Span,
    pub resolved: Symbol,
    pub original: Symbol,
}

impl Spanned for ResolvedName {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Property {
    pub span: Span,
    pub attributes: Vec<AttributeGroup>,
    pub modifiers: PropertyModifierGroup,
    pub r#type: Option<DataType>,
    pub entries: Vec<PropertyEntry>,
    pub end: Span,
}

impl Spanned for Property {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct VariableProperty {
    pub span: Span,
    pub attributes: Vec<AttributeGroup>,
    pub r#type: Option<DataType>,
    pub entries: Vec<PropertyEntry>,
    pub end: Span,
}

impl Spanned for VariableProperty {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct PropertyEntry {
    pub span: Span,
    pub kind: PropertyEntryKind,
}

impl Spanned for PropertyEntry {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum PropertyEntryKind {
    Uninitialized {
        variable: SimpleVariable,
    },
    Initialized {
        variable: SimpleVariable,
        equals: Span,
        value: Expression,
    },
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct TraitBody {
    pub span: Span,
    pub left_brace: Span,
    pub members: Vec<ClassishMember>,
    pub right_brace: Span,
}

impl Spanned for TraitBody {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct TraitStatement {
    pub span: Span,
    pub r#trait: Span,
    pub name: Name,
    pub attributes: Vec<AttributeGroup>,
    pub body: TraitBody,
}

impl Spanned for TraitStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct TraitUsage {
    pub span: Span,
    pub r#use: Span,
    pub traits: Vec<Name>,
    pub adaptations: Vec<TraitUsageAdaptation>,
}

impl Spanned for TraitUsage {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct TraitUsageAdaptation {
    pub span: Span,
    pub kind: TraitUsageAdaptationKind,
}

impl Spanned for TraitUsageAdaptation {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum TraitUsageAdaptationKind {
    Alias {
        r#trait: Option<Name>,
        method: SimpleIdentifier,
        alias: SimpleIdentifier,
        visibility: Option<VisibilityModifier>,
    },
    Visibility {
        r#trait: Option<Name>,
        method: SimpleIdentifier,
        visibility: VisibilityModifier,
    },
    Precedence {
        r#trait: Option<Name>,
        method: SimpleIdentifier,
        insteadof: Vec<SimpleIdentifier>,
    },
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct CatchType {
    pub span: Span,
    pub kind: CatchTypeKind,
}

impl Spanned for CatchType {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum CatchTypeKind {
    Identifier { identifier: SimpleIdentifier },
    Union { identifiers: Vec<SimpleIdentifier> },
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct TryStatement {
    pub span: Span,
    pub start: Span,
    pub end: Span,
    pub body: Block,
    pub catches: Vec<CatchBlock>,
    pub finally: Option<FinallyBlock>,
}

impl Spanned for TryStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct CatchBlock {
    pub span: Span,
    pub start: Span,
    pub end: Span,
    pub types: CatchType,
    pub var: Option<SimpleVariable>,
    pub body: Block,
}

impl Spanned for CatchBlock {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct FinallyBlock {
    pub span: Span,
    pub start: Span,
    pub end: Span,
    pub body: Block,
}

impl Spanned for FinallyBlock {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum Variable {
    SimpleVariable(SimpleVariable),
    VariableVariable(VariableVariable),
    BracedVariableVariable(BracedVariableVariable),
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct SimpleVariable {
    pub symbol: Symbol,
    pub stripped: Symbol,
    pub span: Span,
}

impl Spanned for SimpleVariable {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct VariableVariable {
    pub span: Span,
    pub variable: Box<Variable>,
}

impl Spanned for VariableVariable {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct BracedVariableVariable {
    pub span: Span,
    pub start: Span,
    pub variable: Box<Expression>,
    pub end: Span,
}

impl Spanned for BracedVariableVariable {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum Ending {
    Missing(Span),
    Semicolon(Span),
    CloseTag(Span),
}

impl Spanned for Ending {
    fn span(&self) -> Span {
        match self {
            Ending::Missing(span) => *span,
            Ending::Semicolon(span) => *span,
            Ending::CloseTag(span) => *span,
            _ => Span::default(),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct StaticStatement {
    pub span: Span,
    pub vars: Vec<StaticVar>,
    pub semicolon: Span,
}

impl Spanned for StaticStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct SwitchStatement {
    pub span: Span,
    pub switch: Span,
    pub left_parenthesis: Span,
    pub condition: Expression,
    pub right_parenthesis: Span,
    pub cases: Vec<Case>,
}

impl Spanned for SwitchStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct EchoStatement {
    pub span: Span,
    pub echo: Span,
    pub values: Vec<Expression>,
    pub ending: Ending,
}

impl Spanned for EchoStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ReturnStatement {
    pub span: Span,
    pub r#return: Span,
    pub value: Option<Expression>,
    pub ending: Ending,
}

impl Spanned for ReturnStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct UseStatement {
    pub span: Span,
    pub kind: UseKind,
    pub uses: Vec<Use>,
}

impl Spanned for UseStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct GroupUseStatement {
    pub span: Span,
    pub prefix: SimpleIdentifier,
    pub kind: UseKind,
    pub uses: Vec<Use>,
}

impl Spanned for GroupUseStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct HaltCompilerStatement {
    pub span: Span,
    pub content: Option<Token>,
}

impl Spanned for HaltCompilerStatement {
    fn span(&self) -> Span {
        self.span
    }
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct StaticVar {
    pub span: Span,
    pub var: Variable,
    pub default: Option<Expression>,
}

impl Spanned for StaticVar {
    fn span(&self) -> Span {
        self.span
    }
}
